无需分层遍历的宽度优先搜索template

Python:

from collections import deque

queue = deque()
seen = set()  #等价于Java版本中的set

seen.add(start)
queue.append(start)
while len(queue):
    head = queue.popleft()
    for neighbor in head.neighbors:
        if neighbor not in seen:
            seen.add(neighbor)
            queue.append(neighbor)

上述代码中：

neighbor 表示从某个点 head 出发，可以走到的下一层的节点。
seen 存储已经访问过的节点（已经丢到 queue 里去过的节点）
queue 存储等待被拓展到下一层的节点
seen 与 queue 是一对好基友，无时无刻都一起出现，往 queue 里新增一个节点，就要同时丢到 set 里。


需要分层遍历的宽度搜先搜索template

Python：

from collections import deque

queue = deque()
seen = set()

seen.add(start)
queue.append(start)
while len(queue):
    size = len(queue)
    for _ in range(size):
        head = queue.popleft()
        for neighbor in head.neighbors:
            if neighbor not in seen:
                seen.add(neighbor)
                queue.append(neighbor)
上述代码中：

size = queue.size() 是一个必须的步骤。如果在 for 循环中使用 for (int i = 0; i < queue.size(); i++) 会出错，因为 queue.size() 是一个动态变化的值。所以必须先把当前层一共有多少个节点存在局部变量 size 中，才不会把下一层的节点也在当前层进行扩展。

///////////////////////////////////////////////////////////////////////////////////////////////////////////////


Queue: FIFO

class Queue(object):
    #定义一个空队列
    def __init__(self):
        self.items = []
    #队列(只能在队尾)添加一个元素
    def enqueue(self, item):
        self.items.append(item)
    #删除队列（只能在对头）一个元素
    def dequeue(self):
        self.items.pop(0)
    #判断队列是否为空
    def isEmpty(self):
        return(self.items == [])
    #清空队列
    def clear(self):
        del(self.items) #该队列就不存在了，而不是清空元素
    #返回队列项的数量
    def size(self):
        return(len(self.items))
    #打印队列
    def print(self):
        print(self.items)


通常情况下，BFS时间最优


